open Ocamlformat_lib

let default_profile : Conf.t =
  let elt content = Conf.Elt.make content `Default in
  { fmt_opts =
      { align_symbol_open_paren = elt true
      ; assignment_operator = elt `End_line
      ; break_around_multiline_strings = elt false
      ; break_before_in = elt `Fit_or_vertical
      ; break_cases = elt `Fit
      ; break_collection_expressions = elt `Fit_or_vertical
      ; break_colon = elt `After
      ; break_infix = elt `Wrap
      ; break_infix_before_func = elt false
      ; break_fun_decl = elt `Wrap
      ; break_fun_sig = elt `Wrap
      ; break_separators = elt `After
      ; break_sequences = elt true
      ; break_string_literals = elt `Auto
      ; break_struct = elt true
      ; cases_exp_indent = elt 4
      ; cases_matching_exp_indent = elt `Normal
      ; disambiguate_non_breaking_match = elt false
      ; doc_comments = elt `After_when_possible
      ; doc_comments_padding = elt 2
      ; doc_comments_tag_only = elt `Default
      ; dock_collection_brackets = elt true
      ; exp_grouping = elt `Parens
      ; extension_indent = elt 2
      ; field_space = elt `Loose
      ; function_indent = elt 2
      ; function_indent_nested = elt `Never
      ; if_then_else = elt `Compact
      ; indent_after_in = elt 0
      ; indicate_multiline_delimiters = elt `No
      ; indicate_nested_or_patterns = elt `Unsafe_no
      ; infix_precedence = elt `Indent
      ; leading_nested_match_parens = elt false
      ; let_and = elt `Compact
      ; let_binding_indent = elt 2
      ; let_binding_deindent_fun = elt true
      ; let_binding_spacing = elt `Compact
      ; let_module = elt `Compact
      ; line_endings = elt `Lf
      ; margin = elt 80
      ; match_indent = elt 0
      ; match_indent_nested = elt `Never
      ; max_indent = elt None
      ; module_item_spacing = elt `Compact
      ; nested_match = elt `Wrap
      ; ocp_indent_compat = elt false
      ; parens_ite = elt false
      ; parens_tuple = elt `Always
      ; parens_tuple_patterns = elt `Multi_line_only
      ; parse_docstrings = elt true
      ; parse_toplevel_phrases = elt false
      ; sequence_blank_line = elt `Preserve_one
      ; sequence_style = elt `Terminator
      ; single_case = elt `Compact
      ; space_around_arrays = elt true
      ; space_around_lists = elt true
      ; space_around_records = elt true
      ; space_around_variants = elt true
      ; stritem_extension_indent = elt 0
      ; type_decl = elt `Compact
      ; type_decl_indent = elt 2
      ; wrap_comments = elt false
      ; wrap_docstrings = elt true
      ; wrap_fun_args = elt true
      }
  ; profile = elt `default
  ; opr_opts =
      { comment_check = elt true
      ; debug = elt false
      ; disable = elt false
      ; margin_check = elt false
      ; max_iters = elt 10
      ; ocaml_version = elt Ocaml_version.Releases.v4_04_0
      ; quiet = elt false
      ; disable_conf_attrs = elt false
      ; version_check = elt true
      }
  }
;;

let ocamlformat_profile : Conf.t =
  let elt content = Conf.Elt.make content `Default in
  { fmt_opts =
      { align_symbol_open_paren = elt true
      ; assignment_operator = elt `End_line
      ; break_around_multiline_strings = elt false
      ; break_before_in = elt `Fit_or_vertical
      ; break_cases = elt `Nested
      ; break_collection_expressions = elt `Fit_or_vertical
      ; break_colon = elt `After
      ; break_infix = elt `Wrap
      ; break_infix_before_func = elt true
      ; break_fun_decl = elt `Wrap
      ; break_fun_sig = elt `Wrap
      ; break_separators = elt `Before
      ; break_sequences = elt false
      ; break_string_literals = elt `Auto
      ; break_struct = elt true
      ; cases_exp_indent = elt 4
      ; cases_matching_exp_indent = elt `Compact
      ; disambiguate_non_breaking_match = elt false
      ; doc_comments = elt `Before_except_val
      ; doc_comments_padding = elt 2
      ; doc_comments_tag_only = elt `Default
      ; dock_collection_brackets = elt false
      ; exp_grouping = elt `Parens
      ; extension_indent = elt 2
      ; field_space = elt `Tight
      ; function_indent = elt 2
      ; function_indent_nested = elt `Never
      ; if_then_else = elt `Compact
      ; indent_after_in = elt 0
      ; indicate_multiline_delimiters = elt `Space
      ; indicate_nested_or_patterns = elt `Space
      ; infix_precedence = elt `Indent
      ; leading_nested_match_parens = elt false
      ; let_and = elt `Compact
      ; let_binding_indent = elt 2
      ; let_binding_deindent_fun = elt true
      ; let_binding_spacing = elt `Compact
      ; let_module = elt `Compact
      ; line_endings = elt `Lf
      ; margin = elt 80
      ; match_indent = elt 0
      ; match_indent_nested = elt `Never
      ; max_indent = elt None
      ; module_item_spacing = elt `Sparse
      ; nested_match = elt `Wrap
      ; ocp_indent_compat = elt false
      ; parens_ite = elt false
      ; parens_tuple = elt `Always
      ; parens_tuple_patterns = elt `Multi_line_only
      ; parse_docstrings = elt false
      ; parse_toplevel_phrases = elt false
      ; sequence_blank_line = elt `Compact
      ; sequence_style = elt `Separator
      ; single_case = elt `Compact
      ; space_around_arrays = elt false
      ; space_around_lists = elt false
      ; space_around_records = elt false
      ; space_around_variants = elt false
      ; stritem_extension_indent = elt 0
      ; type_decl = elt `Compact
      ; type_decl_indent = elt 2
      ; wrap_comments = elt false
      ; wrap_docstrings = elt true
      ; wrap_fun_args = elt true
      }
  ; profile = elt `default
  ; opr_opts =
      { comment_check = elt true
      ; debug = elt false
      ; disable = elt false
      ; margin_check = elt false
      ; max_iters = elt 10
      ; ocaml_version = elt Ocaml_version.Releases.v4_04_0
      ; quiet = elt false
      ; disable_conf_attrs = elt false
      ; version_check = elt true
      }
  }
;;

let janestreet_profile : Conf.t =
  let elt content = Conf.Elt.make content `Default in
  { fmt_opts =
      { align_symbol_open_paren = elt false
      ; assignment_operator = elt `Begin_line
      ; break_around_multiline_strings = elt true
      ; break_before_in = elt `Fit_or_vertical
      ; break_cases = elt `Fit_or_vertical
      ; break_collection_expressions =
          elt ocamlformat_profile.fmt_opts.break_collection_expressions.v
      ; break_colon = elt `Before
      ; break_infix = elt `Fit_or_vertical
      ; break_infix_before_func = elt true
      ; break_fun_decl = elt `Fit_or_vertical
      ; break_fun_sig = elt `Fit_or_vertical
      ; break_separators = elt `Before
      ; break_sequences = elt true
      ; break_string_literals = elt `Auto
      ; break_struct = elt ocamlformat_profile.fmt_opts.break_struct.v
      ; cases_exp_indent = elt 2
      ; cases_matching_exp_indent = elt `Normal
      ; disambiguate_non_breaking_match = elt false
      ; doc_comments = elt `Before
      ; doc_comments_padding = elt 1
      ; doc_comments_tag_only = elt `Fit
      ; dock_collection_brackets = elt false
      ; exp_grouping = elt `Parens
      ; extension_indent = elt 2
      ; field_space = elt `Loose
      ; function_indent = elt 2
      ; function_indent_nested = elt `Never
      ; if_then_else = elt `Keyword_first
      ; indent_after_in = elt 0
      ; indicate_multiline_delimiters = elt `No
      ; indicate_nested_or_patterns = elt `Unsafe_no
      ; infix_precedence = elt `Parens
      ; leading_nested_match_parens = elt true
      ; let_and = elt `Sparse
      ; let_binding_indent = elt 2
      ; let_binding_deindent_fun = elt false
      ; let_binding_spacing = elt `Double_semicolon
      ; let_module = elt `Sparse
      ; line_endings = elt `Lf
      ; margin = elt 90
      ; match_indent = elt 0
      ; match_indent_nested = elt `Never
      ; max_indent = elt None
      ; module_item_spacing = elt `Compact
      ; nested_match = elt `Wrap
      ; ocp_indent_compat = elt true
      ; parens_ite = elt true
      ; parens_tuple = elt `Multi_line_only
      ; parens_tuple_patterns = elt `Multi_line_only
      ; parse_docstrings = elt false
      ; parse_toplevel_phrases = elt false
      ; sequence_blank_line = elt `Compact
      ; sequence_style = elt `Terminator
      ; single_case = elt `Sparse
      ; space_around_arrays = elt true
      ; space_around_lists = elt true
      ; space_around_records = elt true
      ; space_around_variants = elt true
      ; stritem_extension_indent = elt 2
      ; type_decl = elt `Sparse
      ; type_decl_indent = elt 2
      ; wrap_comments = elt false
      ; wrap_docstrings = elt false
      ; wrap_fun_args = elt false
      }
  ; profile = elt `default
  ; opr_opts =
      { comment_check = elt true
      ; debug = elt false
      ; disable = elt false
      ; margin_check = elt false
      ; max_iters = elt 10
      ; ocaml_version = elt Ocaml_version.Releases.v4_04_0
      ; quiet = elt false
      ; disable_conf_attrs = elt false
      ; version_check = elt true
      }
  }
;;
